#define NUM_THREAD_X_GROUP 64

// 平面厚度
#define THICKNESS_PLANE 0.1		

struct InstanceParam
{
    float4x4 objectToWorld;
    float4x4 worldToObject;
};

// 镜头位置
uniform float4 _CameraPosition;

// 镜头参数
// x: 是否正交矩阵
// y: 镜头大小（正交）
// z: 镜头视角
// w: 镜头视角正切值
uniform float4 _CameraParam;

// 镜头视锥体平面（xyz: 平面法线 w: 原点到平面距离）
uniform float4 _CameraFrustumPlanes[6];

uniform bool _EnableFrustumCulling;

// 可视距离
uniform float _VisibleDistance;

uniform float4 _InstanceMinBounds;
uniform float4 _InstanceMaxBounds;

uniform uint _InstancingCount;

StructuredBuffer<float4x4> _InstancingBuffer;

// https://discussions.unity.com/t/shader-inverse-float4x4-function/36738
inline float4x4 InvMatrix(float4x4 input)
{
    #define minor(a,b,c) determinant(float3x3(input.a, input.b, input.c))
    float4x4 cofactors = float4x4(
        minor(_22_23_24, _32_33_34, _42_43_44),
		-minor(_21_23_24, _31_33_34, _41_43_44),
		minor(_21_22_24, _31_32_34, _41_42_44),
		-minor(_21_22_23, _31_32_33, _41_42_43),

		-minor(_12_13_14, _32_33_34, _42_43_44),
		minor(_11_13_14, _31_33_34, _41_43_44),
		-minor(_11_12_14, _31_32_34, _41_42_44),
		minor(_11_12_13, _31_32_33, _41_42_43),

		minor(_12_13_14, _22_23_24, _42_43_44),
		-minor(_11_13_14, _21_23_24, _41_43_44),
		minor(_11_12_14, _21_22_24, _41_42_44),
		-minor(_11_12_13, _21_22_23, _41_42_43),

		-minor(_12_13_14, _22_23_24, _32_33_34),
		minor(_11_13_14, _21_23_24, _31_33_34),
		-minor(_11_12_14, _21_22_24, _31_32_34),
		minor(_11_12_13, _21_22_23, _31_32_33)
    );
    #undef minor
    
    return transpose(cofactors) / determinant(input);
}

inline bool IsVisible(in float3 positionWS)
{
    if (_VisibleDistance >= 0)
    {
        float dx = positionWS.x - _CameraPosition.x;
        float dz = positionWS.z - _CameraPosition.z;
        return dx * dx + dz * dz <= (_VisibleDistance * _VisibleDistance);
    }

    return true;
}

inline bool IsCulling(in float3 positionWS)
{
    for (int index = 0; index < 6; ++index)
    {
        float4 plane = _CameraFrustumPlanes[index];
        if (dot(positionWS, plane.xyz) + plane.w < -THICKNESS_PLANE)
            return true;
    }
    return false;
}

inline bool IsCulling(in float3 minimum, in float3 maximum)
{
    float3 p;
    for (int index = 0; index < 6; ++index)
    {
        float3 normal = _CameraFrustumPlanes[index].xyz;
        float planeDistance = _CameraFrustumPlanes[index].w;
        
        // X axis
        if (normal.x < 0)
            p.x = minimum.x;
        else
            p.x = maximum.x;

        // Y axis
        if (normal.y < 0)
            p.y = minimum.y;
        else
            p.y = maximum.y;

        // Z axis
        if (normal.z < 0)
            p.z = minimum.z;
        else
            p.z = maximum.z;
        
        if (dot(p, normal) + planeDistance < -THICKNESS_PLANE)
            return true;
    }
    return false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// kernel: Main
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma kernel LODCulling

// xyz: lod每层高度 w: LODGroup size
uniform float4 _LODGroupData;

AppendStructuredBuffer<InstanceParam> _VisibleBuffer_LOD0;
AppendStructuredBuffer<InstanceParam> _VisibleBuffer_LOD1;
AppendStructuredBuffer<InstanceParam> _VisibleBuffer_LOD2;

inline float DistanceToRelativeHeight(float dist, float size)
{
    if (_CameraParam.x > 0.5)
        return 0.5 * size / _CameraParam.y;
    return 0.5 * size / (dist * _CameraParam.w);
}

[numthreads(NUM_THREAD_X_GROUP, 1, 1)]
void LODCulling(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _InstancingCount)
        return;
    
    float3 positionWS = _InstancingBuffer[id.x]._14_24_34;
    if (!IsVisible(positionWS))
        return;
    
    float4x4 objectToWorld = _InstancingBuffer[id.x];
    if (_EnableFrustumCulling)
    {
        float3 minBounds = mul(objectToWorld, _InstanceMinBounds).xyz;
        float3 maxBounds = mul(objectToWorld, _InstanceMaxBounds).xyz;
        float3 minimum = min(minBounds, maxBounds);
        float3 maximum = max(minBounds, maxBounds);
        if (IsCulling(minimum, maximum))
            return;
    }
    
    InstanceParam instance = (InstanceParam) 0;
    instance.objectToWorld = objectToWorld;
    instance.worldToObject = InvMatrix(instance.objectToWorld);

    float dist = distance(positionWS, _CameraPosition.xyz);
    float height = DistanceToRelativeHeight(dist, _LODGroupData.w);
    if (height >= _LODGroupData.x)
        _VisibleBuffer_LOD0.Append(instance);
    else if (height >= _LODGroupData.y)
        _VisibleBuffer_LOD1.Append(instance);
    else if (height >= _LODGroupData.z)
        _VisibleBuffer_LOD2.Append(instance);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// kernel: Main
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma kernel Main

AppendStructuredBuffer<InstanceParam> _VisibleBuffer;

[numthreads(NUM_THREAD_X_GROUP, 1, 1)]
void Main(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _InstancingCount)
        return;
    
    float3 positionWS = _InstancingBuffer[id.x]._14_24_34;
    if (!IsVisible(positionWS))
        return;
    
    float4x4 objectToWorld = _InstancingBuffer[id.x];
    
    if (_EnableFrustumCulling)
    {
        float3 minBounds = mul(objectToWorld, _InstanceMinBounds).xyz;
        float3 maxBounds = mul(objectToWorld, _InstanceMaxBounds).xyz;
        float3 minimum = min(minBounds, maxBounds);
        float3 maximum = max(minBounds, maxBounds);
        if (IsCulling(minimum, maximum))
            return;
    }

    InstanceParam instance = (InstanceParam) 0;
    instance.objectToWorld = objectToWorld;
    instance.worldToObject = InvMatrix(instance.objectToWorld);
    _VisibleBuffer.Append(instance);
}
