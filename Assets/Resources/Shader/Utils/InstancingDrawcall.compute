#define NUM_THREAD_X_GROUP 64

// 平面厚度
#define THICKNESS_PLANE 0.1		

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"

struct InstanceParam
{
    float4x4 objectToWorld;
    float4x4 worldToObject;
};

// 镜头位置
uniform float4 _CameraPosition;

// 镜头参数
// x: 是否正交矩阵
// y: 镜头大小（正交）
// z: 镜头视角
// w: 镜头视角正切值
uniform float4 _CameraParam;

// 镜头视锥体平面（xyz: 平面法线 w: 原点到平面距离）
uniform float4 _CameraFrustumPlanes[6];

// 开启视锥剔除
uniform bool _EnableFrustumCulling;

// 开启遮挡剔除
uniform bool _EnableOcclusionCulling;

// 可视距离
uniform float _VisibleDistance;

uniform float4 _InstanceBoundsCenter;
uniform float4 _InstanceBoundsExtent;

// Instancing数
uniform uint _InstancingCount;

StructuredBuffer<float4x4> _InstancingBuffer;

// https://discussions.unity.com/t/shader-inverse-float4x4-function/36738
inline float4x4 InvMatrix(float4x4 input)
{
    #define minor(a,b,c) determinant(float3x3(input.a, input.b, input.c))
    float4x4 cofactors = float4x4(
        minor(_22_23_24, _32_33_34, _42_43_44),
		-minor(_21_23_24, _31_33_34, _41_43_44),
		minor(_21_22_24, _31_32_34, _41_42_44),
		-minor(_21_22_23, _31_32_33, _41_42_43),

		-minor(_12_13_14, _32_33_34, _42_43_44),
		minor(_11_13_14, _31_33_34, _41_43_44),
		-minor(_11_12_14, _31_32_34, _41_42_44),
		minor(_11_12_13, _31_32_33, _41_42_43),

		minor(_12_13_14, _22_23_24, _42_43_44),
		-minor(_11_13_14, _21_23_24, _41_43_44),
		minor(_11_12_14, _21_22_24, _41_42_44),
		-minor(_11_12_13, _21_22_23, _41_42_43),

		-minor(_12_13_14, _22_23_24, _32_33_34),
		minor(_11_13_14, _21_23_24, _31_33_34),
		-minor(_11_12_14, _21_22_24, _31_32_34),
		minor(_11_12_13, _21_22_23, _31_32_33)
    );
    #undef minor
    
    return transpose(cofactors) / determinant(input);
}

inline void GetBoundsVertices(inout float4 vertices[8], in float4x4 objectToWorld)
{
    static const float4 kExtentArray[8] = {
        float4(1, 1, 1, 0),
        float4(1, 1, -1, 0),
        float4(1, -1, 1, 0),
        float4(1, -1, -1, 0),
        float4(-1, 1, 1, 0),
        float4(-1, 1, -1, 0),
        float4(-1, -1, 1, 0),
        float4(-1, -1, -1, 0)
    };
    
    for (int i = 0; i < 8; ++i)
        vertices[i] = mul(objectToWorld, _InstanceBoundsCenter + _InstanceBoundsExtent * kExtentArray[i]);
}

inline void GetBoundsMinMax(in float4x4 objectToWorld, out float3 minimum, out float3 maximum)
{
    float3 minBounds = mul(objectToWorld, _InstanceBoundsCenter - _InstanceBoundsExtent).xyz;
    float3 maxBounds = mul(objectToWorld, _InstanceBoundsCenter + _InstanceBoundsExtent).xyz;
    minimum = min(minBounds, maxBounds);
    maximum = max(minBounds, maxBounds);
}

// 距离剔除
inline bool DistanceCulling(in float3 positionWS)
{
    if (_VisibleDistance >= 0)
    {
        float dx = positionWS.x - _CameraPosition.x;
        float dz = positionWS.z - _CameraPosition.z;
        return dx * dx + dz * dz > (_VisibleDistance * _VisibleDistance);
    }

    return false;
}

// 视锥剔除
inline bool FrustumCulling(in float4x4 objectToWorld)
{
    if (!_EnableFrustumCulling)
        return false;
    
    // 获取包围盒最小与最大值
    //float3 minimum = vertices[0], maximum = vertices[0];
    //for (int i = 1; i < 8; ++i)
    //{
    //    minimum = min(minimum, vertices[i]);
    //    maximum = min(maximum, vertices[i]);
    //}
    
    // 不需要太精确,使用包围盒最大与最小就可以
    float3 minimum = 0, maximum = 0;
    GetBoundsMinMax(objectToWorld, minimum, maximum);
    
    float3 p;
    for (int index = 0; index < 6; ++index)
    {
        float3 normal = _CameraFrustumPlanes[index].xyz;
        float planeDistance = _CameraFrustumPlanes[index].w;
        
        // X axis
        if (normal.x < 0)
            p.x = minimum.x;
        else
            p.x = maximum.x;

        // Y axis
        if (normal.y < 0)
            p.y = minimum.y;
        else
            p.y = maximum.y;

        // Z axis
        if (normal.z < 0)
            p.z = minimum.z;
        else
            p.z = maximum.z;
        
        if (dot(p, normal) + planeDistance < -THICKNESS_PLANE)
            return true;
    }
    return false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// 遮挡剔除
////////////////////////////////////////////////////////////////////////////////////////////////////
uniform float4x4 _HiZViewProjection;

// x: 深度图宽度 y: 深度图高度 z: 深度图MipLevel
uniform float4 _HiZDepthTextureParams;

Texture2D<half> _HiZDepthTexture;
SamplerState sampler_HiZDepthTexture;

inline bool OcclusionCulling(in float4x4 objectToWorld)
{
    if (!_EnableOcclusionCulling)
        return false;
        
    // 获取包围盒顶点
    float4 vertices[8];
    GetBoundsVertices(vertices, objectToWorld);
    
    // 获取包围盒（屏幕空间）
    float3 minimumXYZ = 1, maximumXYZ = -1;
    for (int i = 0; i < 8; ++i)
    {
        float4 positionSS = mul(_HiZViewProjection, vertices[i]);
        float3 positionNDC = positionSS.xyz / positionSS.w;
        minimumXYZ = min(positionNDC, minimumXYZ);
        maximumXYZ = max(positionNDC, maximumXYZ);
    }
        
    // [-1, 1] to [0, 1]
    float4 boundsUVs = float4(minimumXYZ.xy, maximumXYZ.xy);
    boundsUVs = saturate(0.5 * boundsUVs + 0.5);
    
    // 计算出使用哪层mip
    float2 size = (boundsUVs.zw - boundsUVs.xy) * _HiZDepthTextureParams.xy;
    int mipLevel = floor(log2(max(size.x, size.y)));
    if (mipLevel > _HiZDepthTextureParams.z)
    {
        // 对象占用像素过大
        return false;
    }
    
    // 获取深度值
#ifdef UNITY_REVERSED_Z
    float instanceDepth = maximumXYZ.z;
#else
    // [-1, 1] to [0, 1]
    float instanceDepth = minimumXYZ.z;
    instanceDepth = 0.5 * instanceDepth + 0.5;
#endif
    
    // 采集包围盒所占的像素深度
#if UNITY_UV_STARTS_AT_TOP
    boundsUVs = float4(boundsUVs.x, 1 - boundsUVs.y, boundsUVs.z, 1 - boundsUVs.w);
#endif
    float4 depth = float4(_HiZDepthTexture.SampleLevel(sampler_HiZDepthTexture, boundsUVs.xy, mipLevel), _HiZDepthTexture.SampleLevel(sampler_HiZDepthTexture, boundsUVs.zy, mipLevel),
        _HiZDepthTexture.SampleLevel(sampler_HiZDepthTexture, boundsUVs.xw, mipLevel), _HiZDepthTexture.SampleLevel(sampler_HiZDepthTexture, boundsUVs.zw, mipLevel));
    
#ifdef UNITY_REVERSED_Z
    depth.xy = min(depth.xy, depth.zw);
    depth.x = min(depth.x, depth.y);
    return instanceDepth < depth.x;
#else
    depth.xy = max(depth.xy, depth.zw);
    depth.x = max(depth.x, depth.y);
    return instanceDepth > depth.x;
#endif
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Instance是否可见
////////////////////////////////////////////////////////////////////////////////////////////////////
inline bool IsVisible(in float3 positionWS, in float4x4 objectToWorld)
{
    if (DistanceCulling(positionWS))
        return false;

    // 进行视锥剔除检测
    if (FrustumCulling(objectToWorld))
        return false;
    
    // 进行遮挡剔除检测
    if (OcclusionCulling(objectToWorld))
        return false;
    
    return true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// kernel: DrawLODInstance
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma kernel DrawLODInstance

// xyz: lod每层高度 w: LODGroup size
uniform float4 _LODGroupData;

AppendStructuredBuffer<InstanceParam> _VisibleBuffer_LOD0;
AppendStructuredBuffer<InstanceParam> _VisibleBuffer_LOD1;
AppendStructuredBuffer<InstanceParam> _VisibleBuffer_LOD2;

inline float DistanceToRelativeHeight(float dist, float size)
{
    if (_CameraParam.x > 0.5)
        return 0.5 * size / _CameraParam.y;
    return 0.5 * size / (dist * _CameraParam.w);
}

[numthreads(NUM_THREAD_X_GROUP, 1, 1)]
void DrawLODInstance(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _InstancingCount)
        return;
    
    float4x4 objectToWorld = _InstancingBuffer[id.x];
    float3 positionWS = objectToWorld._14_24_34;
    if (!IsVisible(positionWS, objectToWorld))
        return;
    
    InstanceParam instance = (InstanceParam) 0;
    instance.objectToWorld = objectToWorld;
    instance.worldToObject = InvMatrix(instance.objectToWorld);

    float dist = distance(positionWS, _CameraPosition.xyz);
    float height = DistanceToRelativeHeight(dist, _LODGroupData.w);
    if (height > _LODGroupData.x)
        _VisibleBuffer_LOD0.Append(instance);
    else if (height > _LODGroupData.y)
        _VisibleBuffer_LOD1.Append(instance);
    else if (height > _LODGroupData.z)
        _VisibleBuffer_LOD2.Append(instance);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// kernel: Main
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma kernel Main

AppendStructuredBuffer<InstanceParam> _VisibleBuffer;

[numthreads(NUM_THREAD_X_GROUP, 1, 1)]
void Main(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _InstancingCount)
        return;
    
    float4x4 objectToWorld = _InstancingBuffer[id.x];
    float3 positionWS = objectToWorld._14_24_34;
    if (!IsVisible(positionWS, objectToWorld))
        return;

    InstanceParam instance = (InstanceParam) 0;
    instance.objectToWorld = objectToWorld;
    instance.worldToObject = InvMatrix(instance.objectToWorld);
    _VisibleBuffer.Append(instance);
}
